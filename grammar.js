/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[5,7,15],$V3=[1,16],$V4=[2,8],$V5=[1,20],$V6=[11,14,18,30,33,46,48],$V7=[1,42],$V8=[1,47],$V9=[1,41],$Va=[1,45],$Vb=[1,44],$Vc=[1,43],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,49],$Vh=[1,48],$Vi=[1,50],$Vj=[1,51],$Vk=[1,52],$Vl=[14,46,48],$Vm=[2,103],$Vn=[1,60],$Vo=[8,36,95],$Vp=[2,107],$Vq=[1,93],$Vr=[1,77],$Vs=[1,73],$Vt=[1,71],$Vu=[1,72],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[1,95],$VO=[1,96],$VP=[1,97],$VQ=[1,98],$VR=[1,99],$VS=[14,30,46,48],$VT=[1,121],$VU=[1,120],$VV=[1,122],$VW=[1,123],$VX=[1,124],$VY=[1,125],$VZ=[1,126],$V_=[1,127],$V$=[1,128],$V01=[1,129],$V11=[1,130],$V21=[1,131],$V31=[11,14,18,30,37,46,47,48,54,56,57,58,59,60,61,62,63,64,65,66],$V41=[11,18],$V51=[11,14,18,30,37,46,47,48,54,56,59,60,61,62,63,64,65,66],$V61=[11,14,18,30,37,46,47,48,59,60,61,62,63,64,65,66],$V71=[11,14,18,30,37,46,47,48,63,64,65,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"function":7,"identifier":8,"(":9,"PARAMETROS":10,")":11,"{":12,"ListaIns":13,"}":14,"void":15,"main":16,"ListaIDS":17,",":18,"PRINT":19,"IF":20,"METODO_EXP":21,"SWITCH":22,"WHILE":23,"DO":24,"DECLARACION":25,"ASIGNACION":26,"DECLARACION_ARREGLO":27,"STRUCT":28,"ListaIns2":29,";":30,"TIPO":31,"OPCION_ASIGNACION":32,"=":33,"EXPRESION":34,"struct":35,"[":36,"]":37,"if":38,"else":39,"do":40,"while":41,"switch":42,"caseList":43,"defaultList":44,"defaultlist":45,"case":46,":":47,"default":48,"print":49,"println":50,"printf":51,"EXPRESION_F":52,"LISTA_EXPRESION":53,"-":54,"!":55,"+":56,"*":57,"/":58,"<":59,">":60,">=":61,"<=":62,"==":63,"!=":64,"||":65,"&&":66,"NATIVAS_DISTINTAS":67,"NATIVAS":68,"decimal":69,"true":70,"false":71,"cadena":72,"null":73,"digito":74,"caracter":75,"stringliteral":76,"referencia":77,"CONVERT":78,"caracterOfPosition":79,"subString":80,"lenght":81,"toUppercase":82,"toLowercase":83,"incremento":84,"decremento":85,"toInt":86,"toDouble":87,"String":88,"typeof":89,"sin":90,"cos":91,"tan":92,"sqrt":93,"pow":94,".":95,"parse":96,"L_exp":97,"double":98,"int":99,"boolean":100,"char":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"function",8:"identifier",9:"(",11:")",12:"{",14:"}",15:"void",16:"main",18:",",30:";",33:"=",35:"struct",36:"[",37:"]",38:"if",39:"else",40:"do",41:"while",42:"switch",45:"defaultlist",46:"case",47:":",48:"default",49:"print",50:"println",51:"printf",54:"-",55:"!",56:"+",57:"*",58:"/",59:"<",60:">",61:">=",62:"<=",63:"==",64:"!=",65:"||",66:"&&",69:"decimal",70:"true",71:"false",72:"cadena",73:"null",74:"digito",75:"caracter",76:"stringliteral",77:"referencia",79:"caracterOfPosition",80:"subString",81:"lenght",82:"toUppercase",83:"toLowercase",84:"incremento",85:"decremento",86:"toInt",87:"toDouble",88:"String",89:"typeof",90:"sin",91:"cos",92:"tan",93:"sqrt",94:"pow",95:".",96:"parse",98:"double",99:"int",100:"boolean",101:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,8],[6,8],[6,8],[10,1],[10,0],[17,3],[17,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,2],[29,1],[29,1],[29,1],[25,3],[32,2],[32,0],[28,4],[27,7],[26,3],[20,7],[20,5],[20,11],[20,9],[20,9],[24,9],[23,7],[22,8],[22,7],[22,7],[43,5],[43,4],[44,3],[19,5],[19,5],[19,5],[52,3],[53,3],[53,1],[34,2],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,1],[34,1],[34,1],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,4],[34,4],[34,3],[34,4],[34,4],[34,2],[34,2],[78,4],[78,4],[78,4],[78,4],[68,4],[68,4],[68,4],[68,4],[68,6],[67,6],[21,4],[21,3],[21,1],[97,3],[97,1],[31,1],[31,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   console.log("ya");return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 3:
this.$ =[$$[$0]];
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,15:$V1},{1:[3]},{5:[1,6],6:7,7:$V0,15:$V1},o($V2,[2,3]),{8:[1,8]},{8:[1,9],16:[1,10]},{1:[2,1]},o($V2,[2,2]),{9:[1,11]},{9:[1,12]},{9:[1,13]},{8:$V3,10:14,11:$V4,17:15},{8:$V3,10:17,11:$V4,17:15},{8:$V3,10:18,11:$V4,17:15},{11:[1,19]},{11:[2,7],18:$V5},o($V6,[2,10]),{11:[1,21]},{11:[1,22]},{12:[1,23]},{8:[1,24]},{12:[1,25]},{12:[1,26]},{8:$V7,13:27,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V6,[2,9]),{8:$V7,13:53,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$V7,13:54,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{14:[1,55]},o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),{9:[1,56]},{9:[1,57]},{9:[1,58]},{9:[1,59]},o($Vl,$Vm,{9:$Vn,33:[1,61]}),{9:[1,62]},{9:[1,63]},{12:[1,64]},{8:$V3,17:65,36:[1,66]},{8:[1,67]},o($Vo,[2,106]),o([8,36],$Vp),o($Vo,[2,108]),o($Vo,[2,109]),o($Vo,[2,110]),{14:[1,68]},{14:[1,69]},o($V2,[2,4]),{8:$Vq,9:$Vr,21:76,31:94,34:70,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:104,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:106,36:$Vs,52:105,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:107,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,11:[1,109],21:76,31:94,34:110,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,97:108,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:111,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:112,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:113,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$V7,13:114,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($VS,[2,32],{32:115,18:$V5,33:[1,116]}),{37:[1,117]},{12:[1,118]},o($V2,[2,5]),o($V2,[2,6]),{11:[1,119],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{8:$Vq,9:$Vr,21:76,31:94,34:132,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:133,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:134,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V31,[2,70]),o($V31,[2,71]),o($V31,[2,72]),{8:$Vq,9:$Vr,21:76,31:94,34:135,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V31,[2,74]),o($V31,[2,75]),o($V31,[2,76]),o($V31,[2,77]),o($V31,[2,78]),o($V31,[2,79]),o($V31,[2,80]),o($V31,[2,81]),o($V31,[2,82]),o($V31,[2,83]),{9:[1,136]},{9:[1,137]},{9:[1,138]},{9:[1,139]},{9:[1,140]},o($V31,$Vm,{9:$Vn,84:[1,141],85:[1,142]}),{95:[1,143]},{9:[1,144]},{9:[1,145]},{9:[1,146]},{9:[1,147]},{9:[1,148]},{9:[1,149]},{9:[1,150]},{9:[1,151],95:$Vp},{9:[1,152]},{11:[1,153],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,154]},{18:[1,155],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,156],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,157],18:[1,158]},o($V31,[2,102]),o($V41,[2,105],{54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21}),o($Vl,[2,35],{54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21}),{11:[1,159],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,160],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{14:[1,161]},o($VS,[2,30]),{8:$Vq,9:$Vr,21:76,31:94,34:162,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$V3,17:163},{14:[1,164]},{30:[1,165]},{8:$Vq,9:$Vr,21:76,31:94,34:166,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:167,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:168,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:169,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:170,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:171,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:172,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:173,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:174,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:175,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:176,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:177,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V31,[2,55]),o($V31,[2,56]),{37:[1,178],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,179],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{8:$Vq,9:$Vr,21:76,31:94,34:180,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:181,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{11:[1,182]},{8:$Vq,9:$Vr,21:76,31:94,34:183,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:184,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V31,[2,89]),o($V31,[2,90]),{96:[1,185]},{8:$Vq,9:$Vr,21:76,31:94,34:186,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:187,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:188,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:189,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{74:[1,190]},{8:$Vq,9:$Vr,21:76,31:94,34:191,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:192,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:193,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$Vq,9:$Vr,21:76,31:94,34:194,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{30:[1,195]},{30:[1,196]},{8:$Vq,9:$Vr,21:76,31:94,34:197,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$V7,12:[1,198],13:199,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V31,[2,101]),{8:$Vq,9:$Vr,21:76,31:94,34:200,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{12:[1,201]},{12:[1,202]},{41:[1,203]},o($VS,[2,31],{54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21}),{18:$V5,33:[1,204]},o($Vl,[2,33]),o($Vl,[2,49]),o($V51,[2,58],{57:$VV,58:$VW}),o($V51,[2,59],{57:$VV,58:$VW}),o($V31,[2,60]),o($V31,[2,61]),o($V61,[2,62],{54:$VT,56:$VU,57:$VV,58:$VW}),o($V61,[2,63],{54:$VT,56:$VU,57:$VV,58:$VW}),o($V61,[2,64],{54:$VT,56:$VU,57:$VV,58:$VW}),o($V61,[2,65],{54:$VT,56:$VU,57:$VV,58:$VW}),o($V71,[2,66],{54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_}),o($V71,[2,67],{54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_}),o([11,14,18,30,37,46,47,48,65],[2,68],{54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,66:$V21}),o([11,14,18,30,37,46,47,48,65,66],[2,69],{54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01}),o($V31,[2,57]),o($V31,[2,73]),{11:[1,205],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,206],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},o($V31,[2,86]),{11:[1,207],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,208],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{9:[1,209]},{11:[1,210],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,211],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,212],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,213],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{18:[1,214]},{11:[1,215],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,216],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,217],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,218],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},o($Vl,[2,50]),o($Vl,[2,51]),{11:[2,52],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{8:$V7,13:219,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($Vl,[2,37]),o($V41,[2,104],{54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21}),{43:220,45:[1,221],46:[1,222]},{8:$V7,13:223,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{9:[1,224]},{8:$Vq,9:$Vr,21:76,31:94,34:225,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V31,[2,84]),o($V31,[2,85]),o($V31,[2,87]),o($V31,[2,88]),{8:$Vq,9:$Vr,21:76,31:94,34:226,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($V31,[2,95]),o($V31,[2,96]),o($V31,[2,97]),o($V31,[2,98]),{74:[1,227]},o($V31,[2,91]),o($V31,[2,92]),o($V31,[2,93]),o($V31,[2,94]),{14:[1,228]},{14:[1,230],44:229,46:[1,231],48:[1,232]},{14:[1,233]},{8:$Vq,9:$Vr,21:76,31:94,34:234,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{14:[1,235]},{8:$Vq,9:$Vr,21:76,31:94,34:236,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{30:[1,237],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,238],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{11:[1,239]},o($Vl,[2,36],{39:[1,240]}),{14:[1,241]},o($Vl,[2,44]),{8:$Vq,9:$Vr,21:76,31:94,34:242,36:$Vs,54:$Vt,55:$Vu,67:74,68:75,69:$Vv,70:$Vw,71:$Vx,72:$Vy,73:$Vz,74:$VA,75:$VB,76:$VC,77:$VD,78:87,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{47:[1,243]},o($Vl,[2,45]),{47:[1,244],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},o($Vl,[2,42]),{11:[1,245],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},o($Vl,[2,34]),o($V31,[2,100]),o($V31,[2,99]),{8:$V7,12:[1,246],19:249,20:247,21:250,22:251,23:252,24:253,25:254,26:255,27:256,28:257,29:248,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($Vl,[2,43]),{47:[1,258],54:$VT,56:$VU,57:$VV,58:$VW,59:$VX,60:$VY,61:$VZ,62:$V_,63:$V$,64:$V01,65:$V11,66:$V21},{8:$V7,13:259,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{8:$V7,13:260,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{30:[1,261]},{8:$V7,13:262,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},o($Vl,[2,39]),o($Vl,[2,40]),o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),{30:[1,263]},o($Vl,[2,27]),o($Vl,[2,28]),o($Vl,[2,29]),{8:$V7,13:264,19:28,20:29,21:30,22:31,23:32,24:33,25:34,26:35,27:36,28:37,31:46,35:$V8,38:$V9,40:$Va,41:$Vb,42:$Vc,49:$Vd,50:$Ve,51:$Vf,88:$Vg,98:$Vh,99:$Vi,100:$Vj,101:$Vk},{14:[2,48]},o($Vl,[2,47]),o($Vl,[2,41]),{14:[1,265]},o($Vl,[2,26]),o($Vl,[2,46]),o($Vl,[2,38])],
defaultActions: {6:[2,1],259:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 74
break;
case 5:return 69 
break;
case 6:return 75
break;
case 7:return 72
break;
case 8:return 77
break;
case 9:return 79
break;
case 10:return 99
break;
case 11:return 88
break;
case 12:return 98
break;
case 13:return 100
break;
case 14:return 101
break;
case 15:return 80
break;
case 16:return 81
break;
case 17:return 82
break;
case 18:return 83
break;
case 19:return 86
break;
case 20:return 87
break;
case 21:return 88
break;
case 22:return 89
break;
case 23:return 96
break;
case 24:return 57
break;
case 25:return '%'
break;
case 26:return 95
break;
case 27:return 47
break;
case 28:return 30
break;
case 29:return 54
break;
case 30:return 56
break;
case 31:return '^'
break;
case 32:return 18
break;
case 33:return 84
break;
case 34:return 85
break;
case 35:return 57
break;
case 36:return 59
break;
case 37:return 60
break;
case 38:return 62
break;
case 39:return 61
break;
case 40:return 63
break;
case 41:return 64
break;
case 42:return 65
break;
case 43:return 66
break;
case 44:return 55
break;
case 45:return 33
break;
case 46:return 9
break;
case 47:return 11  
break;
case 48:return 36
break;
case 49:return 37
break;
case 50:return 12
break;
case 51:return 14
break;
case 52:return 70
break;
case 53:return 7
break;
case 54:return 94
break;
case 55:return 93
break;
case 56:return 90
break;
case 57:return 91
break;
case 58:return 92
break;
case 59:return 73
break;
case 60:return 'new'
break;
case 61:return 15
break;
case 62:return 16
break;
case 63:return 71
break;
case 64:return 49
break;
case 65:return 50
break;
case 66:return 51
break;
case 67:return 38
break;
case 68:return 39
break;
case 69:return 16
break;
case 70:return 'break'
break;
case 71:return 41
break;
case 72:return 'bool'
break;
case 73:return 42
break;
case 74:return 46
break;
case 75:return 48
break;
case 76:return 'break'
break;
case 77:return 40
break;
case 78:return 'return'
break;
case 79:return 35
break;
case 80:return 8
break;
case 81:return 5
break;
}
},
rules: [/^(?:\s+[ \t\r\n\f])/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*/]*[*][/])/,/^(?:([0-9]+))/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:(('[^☼]')))/,/^(?:(("[^"]*")))/,/^(?:((([a-zA-Z_])[a-zA-Z0-9_]*)(\.(([a-zA-Z_])[a-zA-Z0-9_]*))?))/,/^(?:caracterOfPosition\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:subString\b)/,/^(?:lenght\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:String\b)/,/^(?:typeof\b)/,/^(?:parse\b)/,/^(?:\*)/,/^(?:%)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:true\b)/,/^(?:function\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:null\b)/,/^(?:new\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:false\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:printf\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:main\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:bool\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:struct\b)/,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}