/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,14],$V2=[1,10],$V3=[1,17],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[2,5,10,19,33,35,37,38,44,46,48,51,53,54,55,56,60,61,104,105,106,107,108],$Vk=[1,46],$Vl=[1,49],$Vm=[1,47],$Vn=[1,48],$Vo=[1,82],$Vp=[1,83],$Vq=[1,81],$Vr=[1,67],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[10,26,41],$VK=[1,95],$VL=[8,13],$VM=[1,132],$VN=[1,117],$VO=[1,116],$VP=[1,118],$VQ=[1,119],$VR=[1,120],$VS=[1,121],$VT=[1,122],$VU=[1,123],$VV=[1,124],$VW=[1,125],$VX=[1,126],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[1,130],$V01=[1,131],$V11=[1,133],$V21=[8,13,26,29,42,45,52,64,65,66,67,68,74,75,76,77,78,79,81,82,83,84,85,97],$V31=[1,159],$V41=[8,29,42],$V51=[1,213],$V61=[1,236],$V71=[1,232],$V81=[1,228],$V91=[1,234],$Va1=[8,13,26,29,42,45,52,64,65,74,75,76,77,78,79,81,82,83,84,85,97],$Vb1=[8,13,26,29,42,45,52,74,75,81,82,83,84,85,97],$Vc1=[8,13,26,29,42,45,52,74,75,76,77,78,79,81,82,83,84,85,97],$Vd1=[8,13,26,29,42,45,52,81,82,83,84,85,97],$Ve1=[2,5,10,19,33,35,37,38,44,46,47,48,51,53,54,55,56,60,61,104,105,106,107,108],$Vf1=[1,291],$Vg1=[8,46],$Vh1=[46,51,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_INSTRUCCIONES":4,"EOF":5,"Verificar_params":6,"PARAMETROS":7,",":8,"TIPO":9,"identifier":10,"ListaIns":11,"PRINT":12,";":13,"DECLARACION":14,"ASIGNACION":15,"LLAMAR":16,"IF":17,"SWITCH":18,"break":19,"WHILE":20,"DO":21,"FOR":22,"decremento":23,"incremento":24,"RETURN":25,".":26,"pop":27,"(":28,")":29,"push":30,"EXPRESION":31,"STRUCT":32,"continue":33,"ListaIns2":34,"print":35,"LISTA_EXPRESION":36,"println":37,"printf":38,"=":39,"LISTA_ID":40,"[":41,"]":42,"PARAMETROS_LLAMADA":43,"if":44,"{":45,"}":46,"else":47,"switch":48,"CASE_LIST":49,"DEFAULT_LIST":50,"case":51,":":52,"default":53,"while":54,"do":55,"for":56,"in":57,"forVar":58,"for_increment":59,"return":60,"struct":61,"Lista_declaracion":62,"OPCION_DECLARACIO_Struct":63,"-":64,"+":65,"*":66,"/":67,"%":68,"sin":69,"cos":70,"tan":71,"pow":72,"sqrt":73,"==":74,"!=":75,">=":76,">":77,"<=":78,"<":79,"!":80,"&&":81,"||":82,"&":83,"^":84,"?":85,"null":86,"numero":87,"true":88,"false":89,"caracter":90,"cadena":91,"toLowercase":92,"toUppercase":93,"length":94,"caracterOfPosition":95,"subString":96,"#":97,"parse":98,"toInt":99,"toDouble":100,"string":101,"typeof":102,"log10":103,"double":104,"String":105,"int":106,"boolean":107,"char":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:",",10:"identifier",13:";",19:"break",23:"decremento",24:"incremento",26:".",27:"pop",28:"(",29:")",30:"push",33:"continue",35:"print",37:"println",38:"printf",39:"=",41:"[",42:"]",44:"if",45:"{",46:"}",47:"else",48:"switch",51:"case",52:":",53:"default",54:"while",55:"do",56:"for",57:"in",60:"return",61:"struct",64:"-",65:"+",66:"*",67:"/",68:"%",69:"sin",70:"cos",71:"tan",72:"pow",73:"sqrt",74:"==",75:"!=",76:">=",77:">",78:"<=",79:"<",80:"!",81:"&&",82:"||",83:"&",84:"^",85:"?",86:"null",87:"numero",88:"true",89:"false",90:"caracter",91:"cadena",92:"toLowercase",93:"toUppercase",94:"length",95:"caracterOfPosition",96:"subString",97:"#",98:"parse",99:"toInt",100:"toDouble",101:"string",102:"typeof",103:"log10",104:"double",105:"String",106:"int",107:"boolean",108:"char"},
productions_: [0,[3,2],[6,1],[6,0],[7,4],[7,2],[4,2],[4,1],[11,2],[11,2],[11,2],[11,2],[11,1],[11,1],[11,2],[11,1],[11,2],[11,1],[11,3],[11,3],[11,2],[11,5],[11,6],[11,2],[11,2],[11,2],[34,2],[34,2],[34,2],[34,2],[34,1],[34,2],[34,1],[34,2],[34,1],[34,3],[34,3],[34,2],[34,5],[34,6],[34,2],[34,2],[34,2],[12,4],[12,4],[12,4],[36,3],[36,1],[14,4],[14,2],[14,6],[14,4],[40,3],[40,1],[15,3],[15,5],[15,7],[15,9],[15,11],[15,6],[16,4],[16,3],[43,3],[43,1],[17,7],[17,5],[17,11],[17,9],[17,9],[17,7],[18,8],[18,7],[18,7],[49,5],[49,4],[50,3],[20,7],[21,8],[22,7],[22,11],[58,4],[58,3],[59,2],[59,2],[59,3],[25,2],[25,1],[32,5],[62,4],[62,2],[63,1],[63,1],[63,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,4],[31,4],[31,4],[31,6],[31,4],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,5],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,5],[31,5],[31,5],[31,6],[31,8],[31,1],[31,3],[31,4],[31,6],[31,2],[31,3],[31,6],[31,4],[31,4],[31,4],[31,4],[31,4],[31,5],[31,1],[9,1],[9,1],[9,1],[9,1],[9,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Tree($$[$0-1]); return this.$; 
break;
case 4:
this.$ = $$[$0-3]; $$[$0-3].push($$[$0-2]);
break;
case 5:
this.$ =[$$[$0-1]];
break;
case 6:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 7:
this.$ =[$$[$0]];
break;
case 8: case 9: case 10: case 16: case 20: case 26: case 27: case 28: case 33: case 37:
this.$ = $$[$0-1];
break;
case 12: case 13: case 15: case 30:
this.$ = $$[$0];
break;
case 14: case 31:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 18: case 36:
this.$ = new InDecrement($$[$0-2], "--", _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 19: case 35:
this.$ = new InDecrement($$[$0-2], "++", _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24: case 40:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 25: case 42:
console.log(yytext+"error sintactico") 
break;
case 43:
this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,1); 
break;
case 44:
this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,2); 
break;
case 46: case 52:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 47: case 53:
this.$ = []; this.$.push($$[$0]);
break;
case 48:
this.$ = new Declaracion($$[$0-3], [$$[$0-2]], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 49:
this.$ = new Declaracion($$[$0-1], $$[$0], defal($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 50:
this.$ = new DeclaracionArray($$[$0-5], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 54:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
this.$ = new If($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 65:
this.$ = new If_unico($$[$0-2], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column); console.log("suuuu1");
break;
case 66:
this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 67:
this.$ = new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 68:
this.$ = new If($$[$0-6], $$[$0-3], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 69:
this.$ = new If_unico($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line, _$[$0-6].first_column); console.log("suuuu");
break;
case 70:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 71:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 72:
this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 73:
this.$ = $$[$0-4]; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
break;
case 74:
this.$ = []; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
break;
case 75:
this.$ = $$[$0]
break;
case 76:
this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 77:
this.$ = new DoWhile($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column); console.log("adentro de mi amigo do")
break;
case 85:
this.$ = new Retorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 86:
this.$ = new Retorno(null, _$[$0].first_line, _$[$0].first_column);
break;
case 93:
this.$ = new Aritmetica(null, $$[$0], '-', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 94:
this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$ = new Seno($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 100:
this.$ = new Cos($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 101:
this.$ = new Tan($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 102:
this.$ = new Pow($$[$0-3],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 103:
this.$ = new Sqrt($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 104:
this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 105:
this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$ = new Logico(null, $$[$0], '!', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 111:
this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 112:
this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 113:
this.$ = new Aritmetica($$[$0-2], $$[$0], '&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 114:
this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 115:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 117:
this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 118:
this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), true, _$[$0].first_line, _$[$0].first_column);
break;
case 119:
this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), false, _$[$0].first_line, _$[$0].first_column);
break;
case 120:
this.$ = new Primitivo(new Tipo(tipos.CARACTER), $$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column);
break;
case 121:
this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column);
break;
case 122:
this.$ = new ToLower($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 123:
this.$ = new ToUpper($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 124:
this.$ = new Length($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 125:
this.$ = new CaracterOFposition($$[$0-5],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 126:
this.$ = new Substring($$[$0-7],$$[$0-3],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 128:
this.$ = new Primitivo(new Tipo(tipos.ARREGLO), $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 129:
this.$ = new Vector($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 132:
this.$=$$[$0-1];
break;
case 133:
this.$ = new Nativas_Diferentes($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 134:
this.$ = new ToInt($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 135:
this.$ = new ToDouble($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 136:
this.$ = new ConverString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 137:
this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 138:
this.$ = new Log($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 140:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 141:
this.$ = new Tipo(tipos.DECIMAL);
break;
case 142:
this.$ = new Tipo(tipos.STRING);
break;
case 143:
this.$ = new Tipo(tipos.ENTERO);
break;
case 144:
this.$ = new Tipo(tipos.BOOLEANO);
break;
case 145:
this.$ = new Tipo(tipos.CARACTER);
break;
}
},
table: [{2:$V0,3:1,4:2,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{1:[3]},{2:$V0,5:[1,35],9:22,10:$V1,11:36,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Vj,[2,7]),{13:[1,37]},{13:[1,38]},{13:[1,39]},{13:[1,40]},o($Vj,[2,12]),o($Vj,[2,13]),{13:[1,41]},o($Vj,[2,15]),{13:[1,42]},o($Vj,[2,17]),{10:$Vk,23:[1,43],24:[1,44],26:[1,45],28:$Vl,39:$Vm,41:$Vn},{13:[1,50]},{13:[1,51]},{13:[1,52]},{13:[1,53]},{28:[1,54]},{28:[1,55]},{28:[1,56]},{10:[1,57],40:58,41:[1,59]},{28:[1,60]},{28:[1,61]},{28:[1,62]},{45:[1,63]},{10:[1,64],28:[1,65]},{9:84,10:$Vo,13:[2,86],16:80,28:$Vp,31:66,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{10:[1,90]},o($VJ,[2,141]),o($VJ,[2,142]),o($VJ,[2,143]),o($VJ,[2,144]),o($VJ,[2,145]),{1:[2,1]},o($Vj,[2,6]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,14]),o($Vj,[2,16]),{13:[1,91]},{13:[1,92]},{10:$VK,27:[1,93],30:[1,94]},{39:[1,96]},{9:84,10:$Vo,16:80,28:$Vp,31:97,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:98,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,29:[1,100],31:101,36:99,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Vj,[2,20]),o($Vj,[2,23]),o($Vj,[2,24]),o($Vj,[2,25]),{9:84,10:$Vo,16:80,28:$Vp,31:101,36:102,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:101,36:103,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:101,36:104,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($VL,[2,53],{39:[1,105]}),{8:[1,106],13:[2,49]},{42:[1,107]},{9:84,10:$Vo,16:80,28:$Vp,31:108,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:109,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:110,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{2:$V0,4:111,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{57:[1,112]},{9:114,10:[1,115],58:113,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{13:[2,85],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{9:84,10:$Vo,16:80,28:$Vp,31:134,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{28:[1,135]},{28:[1,136]},{28:[1,137]},{28:[1,138]},{28:[1,139]},{9:84,10:$Vo,16:80,28:$Vp,31:140,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($V21,[2,116]),o($V21,[2,117]),o($V21,[2,118]),o($V21,[2,119]),o($V21,[2,120]),o($V21,[2,121]),o($V21,[2,127]),{9:84,10:$Vo,16:80,28:$Vp,31:101,36:141,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($V21,[2,140],{28:$Vl,41:[1,142]}),{9:84,10:$Vo,16:80,28:$Vp,31:144,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{26:[1,145]},{28:[1,146]},{28:[1,147]},{28:[1,148]},{28:[1,149]},{28:[1,150]},{45:[1,151]},o($Vj,[2,18]),o($Vj,[2,19]),{28:[1,152]},{28:[1,153]},{26:[1,155],39:[1,154]},{9:84,10:$Vo,16:80,28:$Vp,31:156,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{13:[2,54],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,42:[1,157],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{8:$V31,29:[1,158]},o($V21,[2,61]),o($V41,[2,47],{26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11}),{8:$V31,29:[1,160]},{8:$V31,29:[1,161]},{8:$V31,29:[1,162]},{9:84,10:$Vo,16:80,28:$Vp,31:163,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{10:[1,164]},{10:[1,165]},{26:$VM,29:[1,166],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,167],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,168],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{2:$V0,9:22,10:$V1,11:36,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,46:[1,169],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:170,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{13:[1,171]},{10:[1,172]},{39:[1,173]},{9:84,10:$Vo,16:80,28:$Vp,31:174,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:175,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:176,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:177,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:178,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:179,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:180,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:181,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:182,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:183,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:184,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:185,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:186,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:187,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:188,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:189,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{92:[1,190],93:[1,191],94:[1,192],95:[1,193],96:[1,194]},o($V21,[2,131]),o($V21,[2,93]),{9:84,10:$Vo,16:80,28:$Vp,31:195,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:196,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:197,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:198,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:199,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($V21,[2,110]),{8:$V31,42:[1,200]},{9:84,10:$Vo,16:80,28:$Vp,31:201,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{27:[1,202]},{26:$VM,29:[1,203],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{98:[1,204]},{9:84,10:$Vo,16:80,28:$Vp,31:205,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:206,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:207,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:208,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:209,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:212,10:$V51,62:210,63:211,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{29:[1,214]},{9:84,10:$Vo,16:80,28:$Vp,31:215,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:216,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{10:[1,217]},{13:[2,51],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{39:[1,218]},o($V21,[2,60]),{9:84,10:$Vo,16:80,28:$Vp,31:219,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{13:[2,43]},{13:[2,44]},{13:[2,45]},{13:[2,48],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},o($VL,[2,52]),{39:[1,220]},{2:$V61,9:22,10:$V71,12:223,14:224,15:225,16:226,18:227,19:$V81,20:229,21:230,22:231,25:233,32:235,33:$V91,34:222,35:$V4,37:$V5,38:$V6,45:[1,221],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{45:[1,237]},{45:[1,238]},{54:[1,239]},{26:$VM,45:[1,240],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{9:84,10:$Vo,16:80,28:$Vp,31:241,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{39:[1,242]},{9:84,10:$Vo,16:80,28:$Vp,31:243,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Va1,[2,94],{66:$VP,67:$VQ,68:$VR}),o($Va1,[2,95],{66:$VP,67:$VQ,68:$VR}),o($V21,[2,96]),o($V21,[2,97]),o($V21,[2,98]),o($Vb1,[2,104],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,76:$VU,77:$VV,78:$VW,79:$VX}),o($Vb1,[2,105],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,76:$VU,77:$VV,78:$VW,79:$VX}),o($Vc1,[2,106],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR}),o($Vc1,[2,107],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR}),o($Vc1,[2,108],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR}),o($Vc1,[2,109],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR}),o($Vd1,[2,111],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX}),o([8,13,29,42,45,52,82],[2,112],{26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,83:$V_,84:$V$,85:$V01,97:$V11}),o($Vd1,[2,113],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX}),o($Vd1,[2,114],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX}),{26:$VM,52:[1,244],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{28:[1,245]},{28:[1,246]},{28:[1,247]},{28:[1,248]},{28:[1,249]},{26:$VM,29:[1,250],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,251],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,252],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{8:[1,253],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,254],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},o($V21,[2,128]),{26:$VM,42:[1,255],52:[1,256],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{28:[1,257]},o($V21,[2,132]),{28:[1,258]},{26:$VM,29:[1,259],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,260],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,261],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,262],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,29:[1,263],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{8:[1,265],46:[1,264]},{10:[1,266]},{10:[2,90],41:[1,267]},{10:[2,91]},o($Vj,[2,21]),{26:$VM,29:[1,268],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{13:[2,55],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:[1,270],39:[1,269]},{9:84,10:$Vo,16:80,28:$Vp,31:271,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($V41,[2,46],{26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11}),{9:84,10:$Vo,16:80,28:$Vp,31:272,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{2:$V0,4:273,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Vj,[2,65],{47:[1,274]}),{13:[1,275]},{13:[1,276]},{13:[1,277]},{13:[1,278]},o($Ve1,[2,30]),{13:[1,279]},o($Ve1,[2,32]),{13:[1,280]},o($Ve1,[2,34]),{10:$Vk,23:[1,282],24:[1,281],26:[1,283],28:$Vl,39:$Vm,41:$Vn},{13:[1,284]},{13:[1,285]},{13:[1,286]},{13:[1,287]},{49:288,50:289,51:[1,290],53:$Vf1},{2:$V0,4:292,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{28:[1,293]},{2:$V0,4:294,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{13:[1,295],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{9:84,10:$Vo,16:80,28:$Vp,31:296,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{13:[2,81],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{9:84,10:$Vo,16:80,28:$Vp,31:297,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{29:[1,298]},{29:[1,299]},{29:[1,300]},{87:[1,301]},{87:[1,302]},o($V21,[2,99]),o($V21,[2,100]),o($V21,[2,101]),{9:84,10:$Vo,16:80,28:$Vp,31:303,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($V21,[2,103]),o($V21,[2,129]),{9:84,10:$Vo,16:80,28:$Vp,31:304,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{29:[1,305]},{9:84,10:$Vo,16:80,28:$Vp,31:306,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($V21,[2,134]),o($V21,[2,135]),o($V21,[2,136]),o($V21,[2,137]),o($V21,[2,138]),{13:[2,87]},{9:212,10:$V51,63:307,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Vg1,[2,89]),{42:[1,308]},o($Vj,[2,22]),{9:84,10:$Vo,16:80,28:$Vp,31:309,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{10:[1,310]},{13:[2,59],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{13:[2,50],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{2:$V0,9:22,10:$V1,11:36,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,46:[1,311],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{2:$V61,9:22,10:$V71,12:223,14:224,15:225,16:226,18:227,19:$V81,20:229,21:230,22:231,25:233,32:235,33:$V91,34:312,35:$V4,37:$V5,38:$V6,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Ve1,[2,26]),o($Ve1,[2,27]),o($Ve1,[2,28]),o($Ve1,[2,29]),o($Ve1,[2,31]),o($Ve1,[2,33]),{13:[1,313]},{13:[1,314]},{10:$VK,27:[1,315],30:[1,316]},o($Ve1,[2,37]),o($Ve1,[2,40]),o($Ve1,[2,41]),o($Ve1,[2,42]),{46:[1,318],50:317,51:[1,319],53:$Vf1},{46:[1,320]},{9:84,10:$Vo,16:80,28:$Vp,31:321,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{52:[1,322]},{2:$V0,9:22,10:$V1,11:36,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,46:[1,323],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{9:84,10:$Vo,16:80,28:$Vp,31:324,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{2:$V0,9:22,10:$V1,11:36,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,46:[1,325],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{10:[1,327],59:326},{13:[2,80],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},o($Vd1,[2,115],{64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX}),o($V21,[2,122]),o($V21,[2,123]),o($V21,[2,124]),{29:[1,328]},{8:[1,329]},{26:$VM,29:[1,330],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:$VM,42:[1,331],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},o($V21,[2,139]),{26:$VM,29:[1,332],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{10:[1,333]},{10:[2,92]},{13:[2,56],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{26:[1,335],39:[1,334]},o($Vj,[2,64],{47:[1,336]}),o($Vj,[2,69]),o($Ve1,[2,35]),o($Ve1,[2,36]),{28:[1,337]},{28:[1,338]},{46:[1,339]},o($Ve1,[2,71]),{9:84,10:$Vo,16:80,28:$Vp,31:340,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Ve1,[2,72]),{26:$VM,52:[1,341],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{2:$V0,4:342,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Ve1,[2,76]),{26:$VM,29:[1,343],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},o($Ve1,[2,78]),{29:[1,344]},{23:[1,346],24:[1,345],52:[1,347]},o($V21,[2,125]),{87:[1,348]},o($V21,[2,102]),o($V21,[2,130]),o($V21,[2,133]),o($Vg1,[2,88]),{9:84,10:$Vo,16:80,28:$Vp,31:349,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{10:[1,350]},{2:$V61,9:22,10:$V71,12:223,14:224,15:225,16:226,17:352,18:227,19:$V81,20:229,21:230,22:231,25:233,32:235,33:$V91,34:353,35:$V4,37:$V5,38:$V6,44:$V7,45:[1,351],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{29:[1,354]},{9:84,10:$Vo,16:80,28:$Vp,31:355,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Ve1,[2,70]),{26:$VM,52:[1,356],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{2:$V0,4:357,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{2:$V0,9:22,10:$V1,11:36,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,46:[2,75],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{13:[2,77]},{45:[1,358]},{29:[2,82]},{29:[2,83]},{9:84,10:$Vo,16:80,28:$Vp,31:359,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{29:[1,360]},{13:[2,57],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{39:[1,361]},{2:$V0,4:362,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Vj,[2,67]),o($Vj,[2,68]),o($Ve1,[2,38]),{26:$VM,29:[1,363],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},{2:$V0,4:364,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Vh1,[2,74],{12:4,14:5,15:6,16:7,17:8,18:9,20:11,21:12,22:13,25:15,32:16,9:22,11:36,2:$V0,10:$V1,19:$V2,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi}),{2:$V0,4:365,9:22,10:$V1,11:3,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{26:$VM,29:[2,84],64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},o($V21,[2,126]),{9:84,10:$Vo,16:80,28:$Vp,31:366,41:$Vq,64:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:$Vw,80:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,99:$VE,100:$VF,101:$VG,102:$VH,103:$VI,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{2:$V0,9:22,10:$V1,11:36,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,46:[1,367],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},o($Ve1,[2,39]),o($Vh1,[2,73],{12:4,14:5,15:6,16:7,17:8,18:9,20:11,21:12,22:13,25:15,32:16,9:22,11:36,2:$V0,10:$V1,19:$V2,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi}),{2:$V0,9:22,10:$V1,11:36,12:4,14:5,15:6,16:7,17:8,18:9,19:$V2,20:11,21:12,22:13,25:15,32:16,33:$V3,35:$V4,37:$V5,38:$V6,44:$V7,46:[1,368],48:$V8,54:$V9,55:$Va,56:$Vb,60:$Vc,61:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi},{13:[2,58],26:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,74:$VS,75:$VT,76:$VU,77:$VV,78:$VW,79:$VX,81:$VY,82:$VZ,83:$V_,84:$V$,85:$V01,97:$V11},o($Vj,[2,66]),o($Ve1,[2,79])],
defaultActions: {35:[2,1],160:[2,43],161:[2,44],162:[2,45],213:[2,91],264:[2,87],308:[2,92],343:[2,77],345:[2,82],346:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 
    const {Tree} = require('../Simbols/Tree');
    const {Tipo, tipos, esEntero} = require('../other/tipo');
    const {Primitivo} = require('../Expresiones/Primitivo');
    const {Identificador} = require('../Expresiones/Identificador');
    const {Vector} = require('../Expresiones/Vector');

     //Expresion
    const {Aritmetica} = require('../Expresiones/Aritmetica');
    const {Logico} = require('../Expresiones/Logico');
    const {Relacional} = require('../Expresiones/Relacional');
    const {ToLower} = require('../Expresiones/ToLower');
    const {ToUpper} = require('../Expresiones/ToUpper');  
   
    const {Length} = require('../Expresiones/Length');   
    const {Substring} = require('../Expresiones/Substring'); 
    const {CaracterOFposition} = require('../Expresiones/CaracterOFposition'); 
    const {ToInt} = require('../Expresiones/ToInt'); 
    const {ToDouble} = require('../Expresiones/ToDouble'); 
    const {ConverString} = require('../Expresiones/ConverString');
    const {TypeOf} = require('../Expresiones/TypeOf');
    const {Log} = require('../Expresiones/Log');
    const {Seno} = require('../Expresiones/Seno');
    const {Cos} = require('../Expresiones/Cos');
    const {Tan} = require('../Expresiones/Tan');
    const {Sqrt} = require('../Expresiones/Sqrt');
    const {Pow} = require('../Expresiones/Pow');
    const {Nativas_Diferentes} = require('../Expresiones/Nativas_Diferentes');
    const {Ternario} = require('../Expresiones/Ternario');

    //Instrucciones
    const {Print} = require('../Instrucciones/Print');
    const {If} = require('../Instrucciones/If');
    const {If_unico} = require('../Instrucciones/If_unico');
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {Retorno} = require('../Instrucciones/Retorno');
    const {Break} = require('../Expresiones/Break'); 
    const {While} = require('../Expresiones/While'); 
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {Declaracion, defal} = require('../Instrucciones/Declaracion');
    const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    const {InDecrement} = require('../Expresiones/InDecrement');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 90
break;
case 6:return 91
break;
case 7:return 95
break;
case 8:return 106
break;
case 9:return 105
break;
case 10:return 104
break;
case 11:return 107
break;
case 12:return 108
break;
case 13:return 96
break;
case 14:return 94
break;
case 15:return 93
break;
case 16:return 92
break;
case 17:return 99
break;
case 18:return 100
break;
case 19:return 101
break;
case 20:return 102
break;
case 21:return 98
break;
case 22:return 66
break;
case 23:return 68
break;
case 24:return 26
break;
case 25:return 52
break;
case 26:return 13
break;
case 27:return 85
break;
case 28:return 84
break;
case 29:return 8
break;
case 30:return 24
break;
case 31:return 23
break;
case 32:return 64
break;
case 33:return 65
break;
case 34:return 67
break;
case 35:return 97
break;
case 36:return 78
break;
case 37:return 79
break;
case 38:return 76
break;
case 39:return 77
break;
case 40:return 74
break;
case 41:return 75
break;
case 42:return 39
break;
case 43:return 82
break;
case 44:return 81
break;
case 45:return 83
break;
case 46:return 80
break;
case 47:return 28
break;
case 48:return 29  
break;
case 49:return 41
break;
case 50:return 42
break;
case 51:return 45
break;
case 52:return 46
break;
case 53:return 88
break;
case 54:return 'function'
break;
case 55:return 72
break;
case 56:return 73
break;
case 57:return 69
break;
case 58:return 70
break;
case 59:return 71
break;
case 60:return 86
break;
case 61:return 'new'
break;
case 62:return 'void'
break;
case 63:return 'main'
break;
case 64:return 89
break;
case 65:return 35
break;
case 66:return 37
break;
case 67:return 38
break;
case 68:return 44
break;
case 69:return 57
break;
case 70:return 56
break;
case 71:return 47
break;
case 72:return 'main'
break;
case 73:return 19
break;
case 74:return 54
break;
case 75:return 'bool'
break;
case 76:return 48
break;
case 77:return 51
break;
case 78:return 53
break;
case 79:return 19
break;
case 80:return 55
break;
case 81:return 60
break;
case 82:return 27
break;
case 83:return 30
break;
case 84:return 'log'
break;
case 85:return 87;
break;
case 86:return 61
break;
case 87:return 10;
break;
case 88:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \t\r\n\f])/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*/]*[*][/])/,/^(?:(('[^☼]')))/,/^(?:(("[^"]*")))/,/^(?:caracterOfPosition\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:parse\b)/,/^(?:\*)/,/^(?:%)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\^)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\/)/,/^(?:#)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:true\b)/,/^(?:function\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:null\b)/,/^(?:new\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:false\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:printf\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:main\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:bool\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:log\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:struct\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}