/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,13],$V2=[1,9],$V3=[1,16],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[2,5,9,14,28,39,41,43,44,52,54,57,59,60,61,62,67,68,111,112,113,114,115,116],$Vl=[1,47],$Vm=[1,50],$Vn=[1,48],$Vo=[1,49],$Vp=[1,84],$Vq=[1,85],$Vr=[1,83],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[9,35,47],$VL=[1,101],$VM=[1,100],$VN=[16,19],$VO=[1,139],$VP=[1,124],$VQ=[1,123],$VR=[1,125],$VS=[1,126],$VT=[1,127],$VU=[1,128],$VV=[1,129],$VW=[1,130],$VX=[1,131],$VY=[1,132],$VZ=[1,133],$V_=[1,134],$V$=[1,135],$V01=[1,136],$V11=[1,137],$V21=[1,138],$V31=[1,140],$V41=[12,13,16,19,35,48,58,71,72,73,74,75,81,82,83,84,85,86,88,89,90,91,92,104],$V51=[2,5,9,14,28,39,41,43,44,52,53,54,57,59,60,61,62,67,68,111,112,113,114,115,116],$V61=[9,12,13,16,19,35,45,48,58,71,72,73,74,75,81,82,83,84,85,86,88,89,90,91,92,104],$V71=[12,19],$V81=[1,169],$V91=[12,19,48],$Va1=[1,222],$Vb1=[1,246],$Vc1=[1,241],$Vd1=[1,237],$Ve1=[1,243],$Vf1=[12,13,16,19,35,48,58,71,72,81,82,83,84,85,86,88,89,90,91,92,104],$Vg1=[12,13,16,19,48,58,81,82,88,89,90,91,92,104],$Vh1=[12,13,16,19,48,58,81,82,83,84,85,86,88,89,90,91,92,104],$Vi1=[12,13,16,19,48,58,88,89,90,91,92,104],$Vj1=[14,19],$Vk1=[1,299],$Vl1=[14,57,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_INSTRUCCIONES":4,"EOF":5,"INSTRUCCIONES":6,"INSTRUCCION":7,"TIPO":8,"identifier":9,"(":10,"Verificar_params":11,")":12,"{":13,"}":14,"DECLARACION":15,";":16,"llamada":17,"PARAMETROS":18,",":19,"ListaIns":20,"llamar":21,"parametros_llamada":22,"EXPRESION":23,"PRINT":24,"ASIGNACION":25,"IF":26,"SWITCH":27,"break":28,"WHILE":29,"DO":30,"FOR":31,"decremento":32,"incremento":33,"RETURN":34,".":35,"pop":36,"push":37,"STRUCT":38,"continue":39,"ListaIns2":40,"print":41,"LISTA_EXPRESION":42,"println":43,"printf":44,"=":45,"LISTA_ID":46,"[":47,"]":48,"LISTA_EXPRESION_PTO":49,"OPCION_PTO":50,"PARAMETROS_LLAMADA":51,"if":52,"else":53,"switch":54,"CASE_LIST":55,"DEFAULT_LIST":56,"case":57,":":58,"default":59,"while":60,"do":61,"for":62,"forIn":63,"in":64,"forVar":65,"for_increment":66,"return":67,"struct":68,"Lista_declaracion":69,"OPCION_DECLARACIO_Struct":70,"-":71,"+":72,"*":73,"/":74,"%":75,"sin":76,"cos":77,"tan":78,"pow":79,"sqrt":80,"==":81,"!=":82,">=":83,">":84,"<=":85,"<":86,"!":87,"&&":88,"||":89,"&":90,"^":91,"?":92,"null":93,"numero":94,"true":95,"false":96,"caracter":97,"cadena":98,"toLowercase":99,"toUppercase":100,"length":101,"caracterOfPosition":102,"subString":103,"#":104,"parse":105,"toInt":106,"toDouble":107,"string":108,"typeof":109,"log10":110,"double":111,"String":112,"int":113,"boolean":114,"char":115,"void":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"identifier",10:"(",12:")",13:"{",14:"}",16:";",19:",",28:"break",32:"decremento",33:"incremento",35:".",36:"pop",37:"push",39:"continue",41:"print",43:"println",44:"printf",45:"=",47:"[",48:"]",52:"if",53:"else",54:"switch",57:"case",58:":",59:"default",60:"while",61:"do",62:"for",64:"in",67:"return",68:"struct",71:"-",72:"+",73:"*",74:"/",75:"%",76:"sin",77:"cos",78:"tan",79:"pow",80:"sqrt",81:"==",82:"!=",83:">=",84:">",85:"<=",86:"<",87:"!",88:"&&",89:"||",90:"&",91:"^",92:"?",93:"null",94:"numero",95:"true",96:"false",97:"caracter",98:"cadena",99:"toLowercase",100:"toUppercase",101:"length",102:"caracterOfPosition",103:"subString",104:"#",105:"parse",106:"toInt",107:"toDouble",108:"string",109:"typeof",110:"log10",111:"double",112:"String",113:"int",114:"boolean",115:"char",116:"void"},
productions_: [0,[3,2],[6,2],[6,1],[7,8],[7,2],[7,1],[11,1],[11,0],[18,4],[18,2],[4,2],[4,1],[17,2],[21,4],[21,3],[22,3],[22,1],[20,2],[20,2],[20,2],[20,1],[20,1],[20,2],[20,1],[20,2],[20,1],[20,3],[20,3],[20,2],[20,5],[20,6],[20,2],[20,2],[20,1],[20,2],[40,2],[40,2],[40,2],[40,1],[40,2],[40,1],[40,2],[40,1],[40,3],[40,3],[40,2],[40,5],[40,6],[40,2],[40,2],[40,1],[40,2],[24,4],[24,4],[24,4],[42,3],[42,1],[15,4],[15,2],[15,6],[15,4],[46,3],[46,1],[25,3],[25,5],[25,6],[49,2],[49,1],[50,2],[50,1],[50,4],[51,3],[51,1],[26,7],[26,5],[26,11],[26,9],[26,9],[26,7],[27,8],[27,7],[27,7],[55,5],[55,4],[56,3],[29,7],[30,8],[31,7],[31,11],[63,1],[65,4],[65,3],[66,2],[66,2],[66,3],[34,2],[34,1],[38,5],[69,3],[69,1],[70,2],[70,2],[70,4],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,4],[23,4],[23,4],[23,6],[23,4],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,5],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,5],[23,5],[23,5],[23,6],[23,8],[23,1],[23,3],[23,4],[23,6],[23,2],[23,3],[23,6],[23,4],[23,4],[23,4],[23,4],[23,4],[23,1],[23,3],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Tree($$[$0-1]); return this.$; 
break;
case 2: case 11:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 3: case 12:
this.$ =[$$[$0]];
break;
case 4:
this.$ = new DeclaracionMetodo($$[$0-7] ,$$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 5: case 13: case 18: case 19: case 20: case 25: case 29: case 32: case 36: case 37: case 38: case 42: case 46: case 50:
this.$ = $$[$0-1];
break;
case 7: case 34: case 85:
this.$ = $$[$0]
break;
case 8:
this.$ = []
break;
case 9:
this.$ = $$[$0-3]; this.$.push(new Declaracion($$[$0-1], $$[$0], null,_$[$0-3].first_line, _$[$0-3].first_column));
break;
case 10:
this.$ = []; this.$.push(new Declaracion($$[$0-1], $$[$0], null,_$[$0-1].first_line, _$[$0-1].first_column));
break;
case 14:
this.$ = new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 15:
this.$ = new LlamadaMetodo($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 16:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 17: case 68: case 73:
 this.$ = []; this.$.push($$[$0]);
break;
case 21: case 22: case 24: case 39: case 51:
this.$ = $$[$0];
break;
case 23: case 40:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 27: case 45:
this.$ = new InDecrement($$[$0-2], "--", _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 28: case 44:
this.$ = new InDecrement($$[$0-2], "++", _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30: case 47:
this.$ = new Pop($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 31: case 48:
this.$ = new AddLista($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 33: case 49:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 35: case 52:
console.log(yytext+"error sintactico") 
break;
case 53:
this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,1); 
break;
case 54:
this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,2); 
break;
case 56: case 62: case 99:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 57: case 63: case 100:
this.$ = []; this.$.push($$[$0]);
break;
case 58:
this.$ = new Declaracion($$[$0-3], [$$[$0-2]], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 59:
this.$ = new Declaracion($$[$0-1], $$[$0], defal($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 60:
this.$ = new DeclaracionArray($$[$0-5], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 61:
this.$ = new DeclaracionVarStruct(  new Tipo(tipos.STRUCTS),$$[$0-3], [$$[$0-2]], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 64: case 92: case 95:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
this.$ = new Asignacion_Struct($$[$0-4], $$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 66:
this.$ = new AsignacionVector($$[$0-5], $$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 67:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 69:
 this.$ =$$[$0];
break;
case 70:
 this.$ =$$[$0]; console.log("efeeee") 
break;
case 71:
 this.$ =$$[$0-3];
break;
case 74:
this.$ = new If($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 75:
this.$ = new If_unico($$[$0-2], $$[$0],[], null,1, _$[$0-4].first_line, _$[$0-4].first_column); console.log("suuuu1");
break;
case 76:
this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 77:
this.$ = new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 78:
this.$ = new If_unico($$[$0-6],null, $$[$0-3], $$[$0],2, _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 79:
this.$ = new If_unico($$[$0-4],$$[$0-2],[],$$[$0],1,_$[$0-6].first_line, _$[$0-6].first_column); console.log("suuuu");
break;
case 80:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 81:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 82:
this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 83:
this.$ = $$[$0-4]; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
break;
case 84:
this.$ = []; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
break;
case 86:
this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 87:
this.$ = new DoWhile($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column); console.log("adentro de mi amigo do")
break;
case 88:
this.$ = new ForIn($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 89:
this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 90:
this.$ = new Declaracion(new Tipo(tipos.STRING), [$$[$0]], defal(new Tipo(tipos.STRING)), _$[$0].first_line, _$[$0].first_column);
break;
case 91:
this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 93:
this.$ = new InDecrement($$[$0-1], "++", _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 94:
this.$ = new InDecrement($$[$0-1], "--", _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 96:
this.$ = new Retorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 97:
this.$ = new Retorno(null, _$[$0].first_line, _$[$0].first_column);
break;
case 98:
this.$ = new Struct($$[$0-3],$$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 101:
this.$ = new Declaracion($$[$0-1], [$$[$0]], defal($$[$0-1]), _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 102:
this.$ = new DeclaracionVarStruct(  new Tipo(tipos.STRUCTS),$$[$0-1], [$$[$0]], null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 103:
this.$ = new DeclaracionArray($$[$0-3], $$[$0], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 104:
this.$ = new Aritmetica(null, $$[$0], '-', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 105:
this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$ = new Seno($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 111:
this.$ = new Cos($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 112:
this.$ = new Tan($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 113:
this.$ = new Pow($$[$0-3],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 114:
this.$ = new Sqrt($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 115:
this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 116:
this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 117:
this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 118:
this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 119:
this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 120:
this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 121:
this.$ = new Logico(null, $$[$0], '!', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 122:
this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 123:
this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 124:
this.$ = new Aritmetica($$[$0-2], $$[$0], '&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 125:
this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 126:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 128:
this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 129:
this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), true, _$[$0].first_line, _$[$0].first_column);
break;
case 130:
this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), false, _$[$0].first_line, _$[$0].first_column);
break;
case 131:
this.$ = new Primitivo(new Tipo(tipos.CARACTER), $$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column);
break;
case 132:
this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column);
break;
case 133:
this.$ = new ToLower($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 134:
this.$ = new ToUpper($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 135:
this.$ = new Length($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 136:
this.$ = new CaracterOFposition($$[$0-5],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); console.log("adentro de caracterofposition")
break;
case 137:
this.$ = new Substring($$[$0-7], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 139:
this.$ = new Primitivo(new Tipo(tipos.ARREGLO), $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 140:
this.$ = new Vector($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 143:
this.$=$$[$0-1];
break;
case 144:
this.$ = new Nativas_Diferentes($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 145:
this.$ = new ToInt($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 146:
this.$ = new ToDouble($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 147:
this.$ = new ConverString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 148:
this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 149:
this.$ = new Log($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);console.log("adentro del log papa")
break;
case 150:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 151:
  console.log($$[$0-2]+"tu puta madre jison"); this.$ = new Obtener_struct($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);   
break;
case 152:
this.$ = new Tipo(tipos.DECIMAL);
break;
case 153:
this.$ = new Tipo(tipos.STRING);
break;
case 154:
this.$ = new Tipo(tipos.ENTERO);
break;
case 155:
this.$ = new Tipo(tipos.BOOLEANO);
break;
case 156:
this.$ = new Tipo(tipos.CARACTER);
break;
case 157:
this.$ = new Tipo(tipos.VOID);
break;
}
},
table: [{2:$V0,3:1,4:2,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{1:[3]},{2:$V0,5:[1,37],8:22,9:$V1,15:5,17:17,20:38,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($Vk,[2,12]),{16:[1,39]},{16:[1,40]},{16:[1,41]},o($Vk,[2,21]),o($Vk,[2,22]),{16:[1,42]},o($Vk,[2,24]),{16:[1,43]},o($Vk,[2,26]),{9:$Vl,10:$Vm,32:[1,44],33:[1,45],35:[1,46],45:$Vn,47:$Vo},{16:[1,51]},{16:[1,52]},{16:[1,53]},o($Vk,[2,34]),{16:[1,54]},{10:[1,55]},{10:[1,56]},{10:[1,57]},{9:[1,58],46:59,47:[1,60]},{10:[1,61]},{10:[1,62]},{10:[1,63]},{13:[1,64]},{9:[1,67],10:[1,66],63:65},{8:86,9:$Vp,10:$Vq,16:[2,97],21:82,23:68,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{9:[1,92]},{16:[1,93]},o($VK,[2,152]),o($VK,[2,153]),o($VK,[2,154]),o($VK,[2,155]),o($VK,[2,156]),o($VK,[2,157]),{1:[2,1]},o($Vk,[2,11]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),o($Vk,[2,23]),o($Vk,[2,25]),{16:[1,94]},{16:[1,95]},{9:$VL,35:$VM,36:[1,96],37:[1,97],49:98,50:99},{45:[1,102]},{8:86,9:$Vp,10:$Vq,21:82,23:103,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:104,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,12:[1,106],21:82,22:105,23:107,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($Vk,[2,29]),o($Vk,[2,32]),o($Vk,[2,33]),o($Vk,[2,35]),{8:86,9:$Vp,10:$Vq,21:82,23:109,42:108,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:109,42:110,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:109,42:111,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($VN,[2,63],{45:[1,112]}),{16:[2,59],19:[1,113]},{48:[1,114]},{8:86,9:$Vp,10:$Vq,21:82,23:115,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:116,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:117,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{2:$V0,4:118,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{64:[1,119]},{8:121,9:[1,122],65:120,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{64:[2,90]},{16:[2,96],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{8:86,9:$Vp,10:$Vq,21:82,23:141,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{10:[1,142]},{10:[1,143]},{10:[1,144]},{10:[1,145]},{10:[1,146]},{8:86,9:$Vp,10:$Vq,21:82,23:147,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V41,[2,127]),o($V41,[2,128]),o($V41,[2,129]),o($V41,[2,130]),o($V41,[2,131]),o($V41,[2,132]),o($V41,[2,138]),{8:86,9:$Vp,10:$Vq,21:82,23:109,42:148,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V41,[2,150],{10:$Vm,47:[1,149]}),{8:86,9:$Vp,10:$Vq,21:82,23:150,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{35:[1,151]},{10:[1,152]},{10:[1,153]},{10:[1,154]},{10:[1,155]},{10:[1,156]},{13:[1,157]},o($V51,[2,13]),o($Vk,[2,27]),o($Vk,[2,28]),{10:[1,158]},{10:[1,159]},{9:$VL,35:$VM,45:[1,160],50:161},o($V61,[2,68]),{9:[1,162]},o($V61,[2,70],{47:[1,163]}),{8:86,9:$Vp,10:$Vq,21:82,23:164,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{16:[2,64],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{35:$VO,48:[1,165],71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,166],19:[1,167]},o($V41,[2,15]),o($V71,[2,17],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31}),{12:[1,168],19:$V81},o($V91,[2,57],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31}),{12:[1,170],19:$V81},{12:[1,171],19:$V81},{8:86,9:$Vp,10:$Vq,21:82,23:172,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{9:[1,173]},{9:[1,174]},{12:[1,175],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,176],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,177],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{2:$V0,8:22,9:$V1,14:[1,178],15:5,17:17,20:38,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:179,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{16:[1,180]},{9:[1,181]},{45:[1,182]},{8:86,9:$Vp,10:$Vq,21:82,23:183,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:184,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:185,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:186,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:187,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:188,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:189,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:190,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:191,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:192,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:193,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:194,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:195,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:196,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:197,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:198,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{9:$VL,35:$VM,49:204,50:99,99:[1,199],100:[1,200],101:[1,201],102:[1,202],103:[1,203]},o($V41,[2,142]),o($V41,[2,104]),{8:86,9:$Vp,10:$Vq,21:82,23:205,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:206,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:207,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:208,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:209,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V41,[2,121]),{19:$V81,48:[1,210]},{8:86,9:$Vp,10:$Vq,21:82,23:211,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{12:[1,212],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{105:[1,213]},{8:86,9:$Vp,10:$Vq,21:82,23:214,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:215,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:216,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:217,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:218,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:221,9:$Va1,69:219,70:220,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{12:[1,223]},{8:86,9:$Vp,10:$Vq,21:82,23:224,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:225,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V61,[2,67]),o($V61,[2,69]),{8:86,9:$Vp,10:$Vq,21:82,23:226,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{16:[2,61],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{45:[1,227]},o($V41,[2,14]),{8:86,9:$Vp,10:$Vq,21:82,23:228,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{16:[2,53]},{8:86,9:$Vp,10:$Vq,21:82,23:229,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{16:[2,54]},{16:[2,55]},{16:[2,58],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},o($VN,[2,62]),{45:[1,230]},{2:$Vb1,8:22,9:$Vc1,13:[1,231],15:234,17:245,21:30,24:233,25:235,27:236,28:$Vd1,29:238,30:239,31:240,34:242,38:244,39:$Ve1,40:232,41:$V4,43:$V5,44:$V6,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{13:[1,247]},{13:[1,248]},{60:[1,249]},{13:[1,250],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{8:86,9:$Vp,10:$Vq,21:82,23:251,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{45:[1,252]},{8:86,9:$Vp,10:$Vq,21:82,23:253,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($Vf1,[2,105],{73:$VR,74:$VS,75:$VT}),o($Vf1,[2,106],{73:$VR,74:$VS,75:$VT}),o($V41,[2,107]),o($V41,[2,108]),o($V41,[2,109]),o($Vg1,[2,115],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,83:$VW,84:$VX,85:$VY,86:$VZ}),o($Vg1,[2,116],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,83:$VW,84:$VX,85:$VY,86:$VZ}),o($Vh1,[2,117],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT}),o($Vh1,[2,118],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT}),o($Vh1,[2,119],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT}),o($Vh1,[2,120],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT}),o($Vi1,[2,122],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ}),o([12,13,16,19,48,58,89],[2,123],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,90:$V01,91:$V11,92:$V21,104:$V31}),o($Vi1,[2,124],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ}),o($Vi1,[2,125],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ}),{35:$VO,58:[1,254],71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{10:[1,255]},{10:[1,256]},{10:[1,257]},{10:[1,258]},{10:[1,259]},o($V41,[2,151],{50:161,9:$VL}),{12:[1,260],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,261],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,262],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{19:[1,263],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,264],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},o($V41,[2,139]),{35:$VO,48:[1,265],58:[1,266],71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},o($V41,[2,143]),{10:[1,267]},{12:[1,268],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,269],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,270],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,271],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,272],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{14:[1,273],19:[1,274]},o($Vj1,[2,100]),{9:[1,275],47:[1,276]},{9:[1,277]},o($Vk,[2,30]),{12:[1,278],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{16:[2,65],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{35:$VO,48:[1,279],71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{8:86,9:$Vp,10:$Vq,21:82,23:280,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V71,[2,16],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31}),o($V91,[2,56],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31}),{8:86,9:$Vp,10:$Vq,21:82,23:281,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{2:$V0,4:282,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($Vk,[2,75],{53:[1,283]}),{16:[1,284]},{16:[1,285]},{16:[1,286]},o($V51,[2,39]),{16:[1,287]},o($V51,[2,41]),{16:[1,288]},o($V51,[2,43]),{9:$Vl,10:$Vm,32:[1,290],33:[1,289],35:[1,291],45:$Vn,47:$Vo},{16:[1,292]},{16:[1,293]},{16:[1,294]},o($V51,[2,51]),{16:[1,295]},{55:296,56:297,57:[1,298],59:$Vk1},{2:$V0,4:300,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{10:[1,301]},{2:$V0,4:302,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{16:[1,303],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{8:86,9:$Vp,10:$Vq,21:82,23:304,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{16:[2,92],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{8:86,9:$Vp,10:$Vq,21:82,23:305,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{12:[1,306]},{12:[1,307]},{12:[1,308]},{8:86,9:$Vp,10:$Vq,21:82,23:309,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:310,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V41,[2,110]),o($V41,[2,111]),o($V41,[2,112]),{8:86,9:$Vp,10:$Vq,21:82,23:311,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V41,[2,114]),o($V41,[2,140]),{8:86,9:$Vp,10:$Vq,21:82,23:312,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:313,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V41,[2,145]),o($V41,[2,146]),o($V41,[2,147]),o($V41,[2,148]),o($V41,[2,149]),{16:[2,98]},{8:221,9:$Va1,70:314,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($Vj1,[2,101]),{48:[1,315]},o($Vj1,[2,102]),o($Vk,[2,31]),o($V61,[2,71]),{16:[2,66],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{16:[2,60],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{2:$V0,8:22,9:$V1,14:[1,316],15:5,17:17,20:38,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{2:$Vb1,8:22,9:$Vc1,15:234,17:245,21:30,24:233,25:235,27:236,28:$Vd1,29:238,30:239,31:240,34:242,38:244,39:$Ve1,40:317,41:$V4,43:$V5,44:$V6,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V51,[2,36]),o($V51,[2,37]),o($V51,[2,38]),o($V51,[2,40]),o($V51,[2,42]),{16:[1,318]},{16:[1,319]},{9:$VL,35:$VM,36:[1,320],37:[1,321],49:98,50:99},o($V51,[2,46]),o($V51,[2,49]),o($V51,[2,50]),o($V51,[2,52]),{14:[1,323],56:322,57:[1,324],59:$Vk1},{14:[1,325]},{8:86,9:$Vp,10:$Vq,21:82,23:326,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{58:[1,327]},{2:$V0,8:22,9:$V1,14:[1,328],15:5,17:17,20:38,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{8:86,9:$Vp,10:$Vq,21:82,23:329,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{2:$V0,8:22,9:$V1,14:[1,330],15:5,17:17,20:38,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{9:[1,332],66:331},{16:[2,91],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},o($Vi1,[2,126],{35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ}),o($V41,[2,133]),o($V41,[2,134]),o($V41,[2,135]),{12:[1,333],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{19:[1,334],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,335],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{35:$VO,48:[1,336],71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{12:[1,337],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},o($Vj1,[2,99]),{9:[1,338]},o($Vk,[2,74],{53:[1,339]}),o($Vk,[2,79]),o($V51,[2,44]),o($V51,[2,45]),{10:[1,340]},{10:[1,341]},{14:[1,342]},o($V51,[2,81]),{8:86,9:$Vp,10:$Vq,21:82,23:343,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V51,[2,82]),{35:$VO,58:[1,344],71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{2:$V0,4:345,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V51,[2,86]),{12:[1,346],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},o($V51,[2,88]),{12:[1,347]},{32:[1,349],33:[1,348],45:[1,350]},o($V41,[2,136]),{8:86,9:$Vp,10:$Vq,21:82,23:351,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V41,[2,113]),o($V41,[2,141]),o($V41,[2,144]),o($Vj1,[2,103]),{2:$Vb1,8:22,9:$Vc1,13:[1,352],15:234,17:245,21:30,24:233,25:235,26:353,27:236,28:$Vd1,29:238,30:239,31:240,34:242,38:244,39:$Ve1,40:354,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{12:[1,355]},{8:86,9:$Vp,10:$Vq,21:82,23:356,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V51,[2,80]),{35:$VO,58:[1,357],71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{2:$V0,4:358,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{2:$V0,8:22,9:$V1,14:[2,85],15:5,17:17,20:38,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{16:[2,87]},{13:[1,359]},{12:[2,93]},{12:[2,94]},{8:86,9:$Vp,10:$Vq,21:82,23:360,47:$Vr,71:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,87:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC,97:$VD,98:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{12:[1,361],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{2:$V0,4:362,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($Vk,[2,77]),o($Vk,[2,78]),o($V51,[2,47]),{12:[1,363],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},{2:$V0,4:364,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($Vl1,[2,84],{24:4,15:5,25:6,26:7,27:8,29:10,30:11,31:12,34:14,38:15,17:17,8:22,21:30,20:38,2:$V0,9:$V1,28:$V2,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj}),{2:$V0,4:365,8:22,9:$V1,15:5,17:17,20:3,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},{12:[2,95],35:$VO,71:$VP,72:$VQ,73:$VR,74:$VS,75:$VT,81:$VU,82:$VV,83:$VW,84:$VX,85:$VY,86:$VZ,88:$V_,89:$V$,90:$V01,91:$V11,92:$V21,104:$V31},o($V41,[2,137]),{2:$V0,8:22,9:$V1,14:[1,366],15:5,17:17,20:38,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($V51,[2,48]),o($Vl1,[2,83],{24:4,15:5,25:6,26:7,27:8,29:10,30:11,31:12,34:14,38:15,17:17,8:22,21:30,20:38,2:$V0,9:$V1,28:$V2,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj}),{2:$V0,8:22,9:$V1,14:[1,367],15:5,17:17,20:38,21:30,24:4,25:6,26:7,27:8,28:$V2,29:10,30:11,31:12,34:14,38:15,39:$V3,41:$V4,43:$V5,44:$V6,52:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,67:$Vc,68:$Vd,111:$Ve,112:$Vf,113:$Vg,114:$Vh,115:$Vi,116:$Vj},o($Vk,[2,76]),o($V51,[2,89])],
defaultActions: {37:[2,1],67:[2,90],168:[2,53],170:[2,54],171:[2,55],273:[2,98],346:[2,87],348:[2,93],349:[2,94]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
 
    const {Tree} = require('../Simbols/Tree');
    const {Tipo, tipos, esEntero} = require('../other/tipo');
    const {Primitivo} = require('../Expresiones/Primitivo');
    const {Identificador} = require('../Expresiones/Identificador');
    const {Vector} = require('../Expresiones/Vector');

     //Expresion
    const {Aritmetica} = require('../Expresiones/Aritmetica');
    const {Logico} = require('../Expresiones/Logico');
    const {Relacional} = require('../Expresiones/Relacional');
    const {ToLower} = require('../Expresiones/ToLower');
    const {ToUpper} = require('../Expresiones/ToUpper');  
   
    const {Length} = require('../Expresiones/Length');   
    const {Substring} = require('../Expresiones/Substring'); 
    const {CaracterOFposition} = require('../Expresiones/CaracterOFposition'); 
    const {ToInt} = require('../Expresiones/ToInt'); 
    const {ToDouble} = require('../Expresiones/ToDouble'); 
    const {ConverString} = require('../Expresiones/ConverString');
    const {TypeOf} = require('../Expresiones/TypeOf');
    const {Log} = require('../Expresiones/Log');
    const {Seno} = require('../Expresiones/Seno');
    const {Cos} = require('../Expresiones/Cos');
    const {Tan} = require('../Expresiones/Tan');
    const {Sqrt} = require('../Expresiones/Sqrt');
    const {Pow} = require('../Expresiones/Pow');
    const {Nativas_Diferentes} = require('../Expresiones/Nativas_Diferentes');
    const {Ternario} = require('../Expresiones/Ternario');

    //Instrucciones
    const {Print} = require('../Instrucciones/Print');
    const {If} = require('../Instrucciones/If');
    const {If_unico} = require('../Instrucciones/If_unico');
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {Retorno} = require('../Instrucciones/Retorno');
    const {Break} = require('../Expresiones/Break'); 
    const {While} = require('../Instrucciones/While'); 
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {Declaracion, defal} = require('../Instrucciones/Declaracion');
    const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    const {Asignacion_Struct} = require('../Instrucciones/Asignacion_Struct');
    const {AsignacionVector} = require('../Instrucciones/AsignacionVector');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    const {InDecrement} = require('../Expresiones/InDecrement');
    const {AddLista} = require('../Instrucciones/AddLista');
    const {Pop} = require('../Instrucciones/pop');
    const {For} = require('../Instrucciones/For');
    const {ForIn} = require('../Instrucciones/ForIn');
    const {Struct} = require('../Instrucciones/Struct');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
     const {DeclaracionVarStruct} = require('../Instrucciones/DeclaracionVarStruct');
     const {Obtener_struct} = require('../Instrucciones/Obtener_struct');
    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 97
break;
case 6:return 98
break;
case 7:return 102
break;
case 8:return 113
break;
case 9:return 112
break;
case 10:return 111
break;
case 11:return 114
break;
case 12:return 115
break;
case 13:return 103
break;
case 14:return 101
break;
case 15:return 100
break;
case 16:return 99
break;
case 17:return 106
break;
case 18:return 107
break;
case 19:return 108
break;
case 20:return 109
break;
case 21:return 105
break;
case 22:return 73
break;
case 23:return 75
break;
case 24:return 35
break;
case 25:return 58
break;
case 26:return 16
break;
case 27:return 92
break;
case 28:return 91
break;
case 29:return 19
break;
case 30:return 33
break;
case 31:return 32
break;
case 32:return 71
break;
case 33:return 72
break;
case 34:return 74
break;
case 35:return 104
break;
case 36:return 85
break;
case 37:return 86
break;
case 38:return 83
break;
case 39:return 84
break;
case 40:return 81
break;
case 41:return 82
break;
case 42:return 45
break;
case 43:return 89
break;
case 44:return 88
break;
case 45:return 90
break;
case 46:return 87
break;
case 47:return 10
break;
case 48:return 12  
break;
case 49:return 47
break;
case 50:return 48
break;
case 51:return 13
break;
case 52:return 14
break;
case 53:return 95
break;
case 54:return 'function'
break;
case 55:return 79
break;
case 56:return 80
break;
case 57:return 76
break;
case 58:return 77
break;
case 59:return 78
break;
case 60:return 93
break;
case 61:return 'new'
break;
case 62:return 116
break;
case 63:return 'main'
break;
case 64:return 96
break;
case 65:return 41
break;
case 66:return 43
break;
case 67:return 44
break;
case 68:return 52
break;
case 69:return 64
break;
case 70:return 62
break;
case 71:return 53
break;
case 72:return 'main'
break;
case 73:return 28
break;
case 74:return 60
break;
case 75:return 'bool'
break;
case 76:return 54
break;
case 77:return 57
break;
case 78:return 59
break;
case 79:return 28
break;
case 80:return 61
break;
case 81:return 67
break;
case 82:return 36
break;
case 83:return 37
break;
case 84:return 110
break;
case 85:return 94;
break;
case 86:return 68
break;
case 87:return 9;
break;
case 88:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:[ \t\r\n\f])/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*/]*[*][/])/,/^(?:(('[^☼]')))/,/^(?:(("[^"]*")))/,/^(?:caracterOfPosition\b)/,/^(?:int\b)/,/^(?:String\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:parse\b)/,/^(?:\*)/,/^(?:%)/,/^(?:\.)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\^)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\/)/,/^(?:#)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:true\b)/,/^(?:function\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:null\b)/,/^(?:new\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:false\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:printf\b)/,/^(?:if\b)/,/^(?:in\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:main\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:bool\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:do\b)/,/^(?:return\b)/,/^(?:pop\b)/,/^(?:push\b)/,/^(?:log10\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:struct\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}